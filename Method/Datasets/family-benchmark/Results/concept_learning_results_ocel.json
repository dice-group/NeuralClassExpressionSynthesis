{
   "F-measure": [
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0,
      -1.0
   ],
   "Accuracy": [
      0.0,
      0.0,
      0.0,
      1.0,
      0.0,
      0.0,
      1.0,
      1.0,
      0.0,
      1.0,
      0.0,
      0.0,
      1.0,
      0.0,
      0.0,
      0.0,
      0.0,
      1.0,
      0.0,
      1.0,
      1.0,
      0.0,
      1.0,
      1.0,
      1.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      1.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      1.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      1.0,
      0.0,
      1.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      1.0,
      0.0,
      1.0,
      0.0,
      0.0,
      0.0,
      1.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      1.0,
      0.0,
      0.0,
      1.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      1.0,
      0.0,
      0.0,
      0.0,
      0.0,
      1.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      1.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      1.0,
      0.0,
      0.0,
      1.0,
      1.0,
      0.0,
      1.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      1.0,
      1.0,
      1.0,
      0.0,
      0.0,
      0.0,
      0.0,
      1.0,
      0.0,
      1.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      1.0,
      1.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      1.0,
      0.0,
      0.0,
      1.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      1.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      1.0,
      1.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      1.0,
      0.0,
      0.0,
      0.0,
      1.0,
      1.0,
      0.0,
      0.0,
      0.0,
      1.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      1.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0
   ],
   "Runtime": [
      123.41552519798279,
      125.21008515357971,
      124.65020322799683,
      124.06914830207825,
      123.74385666847229,
      124.08699154853821,
      123.80688881874084,
      124.3104875087738,
      123.79162216186523,
      123.98080468177795,
      124.46552085876465,
      124.50217533111572,
      124.19257831573486,
      123.90282845497131,
      123.59231948852539,
      123.6439733505249,
      123.88566565513611,
      123.42395853996277,
      124.23995161056519,
      124.37550234794617,
      123.74719643592834,
      123.76904845237732,
      123.47725558280945,
      123.70721173286438,
      124.52981352806091,
      124.61293506622314,
      123.94999551773071,
      123.5975296497345,
      124.62833523750305,
      123.75912022590637,
      123.759033203125,
      123.78657984733582,
      123.5983407497406,
      123.58713269233704,
      124.6665027141571,
      124.22816824913025,
      125.17532730102539,
      123.86567234992981,
      124.86809802055359,
      123.74785804748535,
      123.48423886299133,
      123.66933298110962,
      124.00767803192139,
      126.87043452262878,
      305.3899173736572,
      135.11185669898987,
      276.1318287849426,
      125.41673469543457,
      265.4544324874878,
      134.8751790523529,
      213.10706543922424,
      135.99234580993652,
      174.2905788421631,
      212.93422389030457,
      123.82343363761902,
      129.97761487960815,
      134.7578821182251,
      138.2342655658722,
      200.50295162200928,
      128.44005298614502,
      140.79605078697205,
      125.87699866294861,
      124.43002796173096,
      126.04780292510986,
      123.97879838943481,
      126.85281896591187,
      123.82564520835876,
      123.58966398239136,
      123.55531525611877,
      125.67627763748169,
      140.47776317596436,
      130.52720499038696,
      123.70889472961426,
      124.38113236427307,
      124.97100472450256,
      124.0003764629364,
      123.88482594490051,
      123.5352041721344,
      123.66595077514648,
      123.6595938205719,
      123.61574602127075,
      125.51813673973083,
      124.52205562591553,
      124.04378962516785,
      123.69173002243042,
      124.2693521976471,
      123.98298978805542,
      123.90864443778992,
      123.75898385047913,
      123.49334120750427,
      125.2742109298706,
      124.33717846870422,
      123.79517912864685,
      123.77481985092163,
      124.18664336204529,
      123.62995791435242,
      124.34544563293457,
      123.87335562705994,
      123.31210970878601,
      124.21405553817749,
      124.44837069511414,
      124.36696791648865,
      123.93906927108765,
      123.7314703464508,
      123.77452850341797,
      123.9860565662384,
      123.6552574634552,
      124.04955291748047,
      123.91349029541016,
      123.75916886329651,
      124.41132116317749,
      123.57944965362549,
      124.19006562232971,
      126.50675010681152,
      124.07917308807373,
      123.52262139320374,
      123.57281756401062,
      123.79566693305969,
      124.67131161689758,
      124.0495285987854,
      125.45869612693787,
      124.3344292640686,
      125.03798985481262,
      124.21317553520203,
      123.77991366386414,
      124.01077389717102,
      123.35800457000732,
      124.66893005371094,
      123.7805826663971,
      123.58187818527222,
      125.32156252861023,
      123.9540057182312,
      124.24754762649536,
      123.90471172332764,
      123.5761387348175,
      123.82772207260132,
      123.45175337791443,
      124.6192102432251,
      123.94909811019897,
      123.64564061164856,
      123.63720321655273,
      124.66732239723206,
      123.75707483291626,
      123.94690012931824,
      126.26760172843933,
      123.7682192325592,
      123.70006966590881,
      123.97666811943054,
      124.33116436004639,
      124.6825110912323,
      123.79435181617737,
      123.38508009910583,
      123.99966311454773,
      124.03033947944641,
      123.47806739807129,
      123.70283555984497,
      123.75874996185303,
      124.54296112060547,
      123.92820453643799,
      123.62213969230652,
      124.14807295799255,
      123.82310271263123,
      123.7454206943512,
      123.75637555122375,
      123.57637524604797,
      124.16219019889832,
      124.41351532936096,
      123.52019333839417,
      123.73145508766174,
      124.01440834999084,
      123.80266213417053,
      123.75277733802795,
      123.45969533920288,
      124.11483407020569,
      124.25964450836182,
      124.12593364715576,
      123.91566324234009,
      123.32142162322998,
      123.48734712600708,
      123.93696904182434,
      123.40626931190491,
      123.7910532951355,
      124.45084404945374,
      123.91763162612915,
      123.91191530227661,
      124.27254343032837,
      124.07946133613586,
      124.10984897613525,
      123.82535004615784,
      123.63298487663269,
      123.60934662818909,
      124.31273674964905,
      124.45980930328369,
      123.57756042480469,
      124.56910681724548,
      123.83493828773499,
      123.45067286491394,
      124.52730584144592,
      123.35245990753174,
      124.98346376419067
   ],
   "Prediction": [
      "None",
      "None",
      "None",
      "Brother ⊓ (Grandfather ⊔ (∃ hasSibling.Father))",
      "None",
      "None",
      "Granddaughter ⊓ (∃ hasParent.(Grandmother ⊔ Sister))",
      "Granddaughter ⊓ (∃ hasParent.(Sister ⊓ (∃ hasChild.Mother)))",
      "None",
      "Grandchild ⊓ (∃ hasSibling.(∃ hasParent.Brother))",
      "None",
      "None",
      "Grandparent ⊓ (Grandson ⊔ (∃ hasChild.Grandmother))",
      "None",
      "None",
      "None",
      "None",
      "Grandchild ⊓ (∃ hasSibling.(Father ⊓ (∃ hasChild.Sister)))",
      "None",
      "Grandchild ⊓ (∃ hasParent.(Grandparent ⊓ (∃ hasSibling.Parent)))",
      "Granddaughter ⊓ (∃ hasParent.Grandchild)",
      "None",
      "Brother ⊓ (∃ hasSibling.(Son ⊓ (∃ hasChild.Grandson)))",
      "Grandchild ⊓ (∃ hasSibling.(∃ hasParent.Grandchild))",
      "Grandparent ⊓ (Sister ⊔ (∃ hasChild.Grandmother))",
      "None",
      "None",
      "None",
      "None",
      "None",
      "Grandchild ⊓ (∃ hasSibling.(∃ hasParent.(Grandson ⊓ (∃ hasChild.Grandson))))",
      "None",
      "None",
      "None",
      "None",
      "None",
      "Granddaughter ⊓ (∃ hasParent.(Grandchild ⊓ (∃ hasSibling.Daughter)))",
      "None",
      "None",
      "None",
      "None",
      "None",
      "None",
      "None",
      "None",
      "None",
      "None",
      "None",
      "None",
      "Son ⊓ (∃ hasSibling.((¬Brother) ⊔ (∃ married.⊤)))",
      "None",
      "(Female ⊓ ((∃ hasChild.Child) ⊔ (∃ hasParent.Child)) ⊓ (¬Son)) ⊔ (∃ hasChild.Grandparent)",
      "None",
      "None",
      "None",
      "None",
      "None",
      "None",
      "None",
      "Granddaughter ⊓ (∃ hasParent.(Grandmother ⊔ Grandson))",
      "None",
      "Grandchild ⊓ (∃ hasSibling.(∃ hasParent.(Granddaughter ⊓ (∃ hasSibling.Daughter))))",
      "None",
      "None",
      "None",
      "Grandparent ⊓ (∃ hasChild.Daughter) ⊓ (∃ hasParent.Child)",
      "None",
      "None",
      "None",
      "None",
      "None",
      "Grandchild ⊓ (∃ hasSibling.(Son ⊓ (∃ hasSibling.Daughter)))",
      "None",
      "None",
      "Grandparent ⊓ (∃ hasParent.(∃ hasChild.Son))",
      "None",
      "None",
      "None",
      "None",
      "None",
      "((¬Son) ⊓ (∃ hasParent.Child)) ⊔ (∃ hasChild.Parent)",
      "None",
      "None",
      "None",
      "None",
      "Granddaughter ⊓ (∃ hasChild.((¬Grandson) ⊔ (∃ hasChild.⊤)))",
      "None",
      "None",
      "None",
      "None",
      "None",
      "None",
      "Father ⊓ (¬Son) ⊓ (∃ married.(Granddaughter ⊓ (∃ hasParent.Granddaughter)))",
      "None",
      "None",
      "None",
      "None",
      "None",
      "Granddaughter ⊓ (∃ hasSibling.(Son ⊓ (∃ hasParent.Grandmother)))",
      "None",
      "None",
      "Granddaughter ⊓ (∃ hasSibling.(∃ hasParent.(Son ⊓ (∃ married.Grandmother))))",
      "Granddaughter ⊓ (∃ hasParent.(Grandchild ⊔ PersonWithASibling))",
      "None",
      "Granddaughter ⊓ (∃ hasParent.(∃ hasParent.(∃ hasChild.Daughter)))",
      "None",
      "None",
      "None",
      "None",
      "None",
      "None",
      "None",
      "None",
      "Granddaughter ⊓ (∃ married.⊤)",
      "Brother ⊓ (∃ hasChild.(∃ hasParent.(∃ hasSibling.Son)))",
      "Child ⊓ (Daughter ⊔ Grandchild ⊔ (∃ hasSibling.Grandmother))",
      "None",
      "None",
      "None",
      "None",
      "Child ⊓ (∃ hasSibling.(Mother ⊓ (∃ hasSibling.Son)))",
      "None",
      "Granddaughter ⊓ (∃ hasChild.(Grandson ⊓ (∃ hasParent.(∃ hasParent.Grandson))))",
      "None",
      "None",
      "None",
      "None",
      "None",
      "Grandchild ⊓ (∃ hasSibling.(Grandmother ⊓ (∃ hasChild.Grandmother)))",
      "Father ⊓ (¬Son) ⊓ (∃ hasChild.(PersonWithASibling ⊓ (∃ hasSibling.Grandchild)))",
      "None",
      "None",
      "None",
      "None",
      "None",
      "None",
      "Grandson ⊓ ((∃ hasChild.Parent) ⊔ (∃ hasSibling.Grandfather)) ⊓ (∃ hasParent.PersonWithASibling)",
      "None",
      "None",
      "PersonWithASibling ⊓ (¬Parent) ⊓ (∃ hasSibling.(Mother ⊓ (∃ hasParent.Grandchild)))",
      "None",
      "None",
      "None",
      "None",
      "None",
      "None",
      "None",
      "None",
      "None",
      "None",
      "None",
      "None",
      "Child ⊓ (∃ hasSibling.(Grandparent ⊓ (∃ hasChild.Father)))",
      "None",
      "None",
      "None",
      "None",
      "None",
      "None",
      "None",
      "None",
      "Grandchild ⊓ (∃ hasSibling.(∃ hasParent.Granddaughter))",
      "Grandfather ⊓ (∃ hasParent.Child)",
      "None",
      "None",
      "None",
      "None",
      "None",
      "None",
      "None",
      "None",
      "None",
      "None",
      "None",
      "None",
      "Parent ⊓ (Granddaughter ⊔ (∃ married.(Grandparent ⊓ (∃ hasChild.Grandmother)))) ⊓ (¬Grandson)",
      "None",
      "None",
      "None",
      "Granddaughter ⊓ (∃ hasChild.(∃ hasParent.(∃ hasSibling.Grandson)))",
      "Grandchild ⊓ (∃ hasSibling.((∃ hasSibling.Grandmother) ⊓ (∃ married.(¬Father))))",
      "None",
      "None",
      "None",
      "Child ⊓ (∃ hasSibling.Grandson)",
      "None",
      "None",
      "None",
      "None",
      "None",
      "None",
      "None",
      "Son ⊓ (∃ hasSibling.(∃ hasChild.Sister))",
      "None",
      "None",
      "None",
      "None",
      "None",
      "None",
      "None"
   ],
   "Length": [
      10,
      10,
      10,
      7,
      10,
      10,
      7,
      9,
      10,
      7,
      10,
      10,
      7,
      10,
      10,
      10,
      10,
      9,
      10,
      9,
      5,
      10,
      9,
      7,
      7,
      10,
      10,
      10,
      10,
      10,
      11,
      10,
      10,
      10,
      10,
      10,
      9,
      10,
      10,
      10,
      10,
      10,
      10,
      10,
      10,
      10,
      10,
      10,
      10,
      10,
      10,
      16,
      10,
      10,
      10,
      10,
      10,
      10,
      10,
      7,
      10,
      11,
      10,
      10,
      10,
      9,
      10,
      10,
      10,
      10,
      10,
      9,
      10,
      10,
      7,
      10,
      10,
      10,
      10,
      10,
      10,
      10,
      10,
      10,
      10,
      10,
      10,
      10,
      10,
      10,
      10,
      10,
      12,
      10,
      10,
      10,
      10,
      10,
      9,
      10,
      10,
      11,
      7,
      10,
      9,
      10,
      10,
      10,
      10,
      10,
      10,
      10,
      10,
      5,
      9,
      9,
      10,
      10,
      10,
      10,
      9,
      10,
      11,
      10,
      10,
      10,
      10,
      10,
      9,
      12,
      10,
      10,
      10,
      10,
      10,
      10,
      13,
      10,
      10,
      12,
      10,
      10,
      10,
      10,
      10,
      10,
      10,
      10,
      10,
      10,
      10,
      10,
      9,
      10,
      10,
      10,
      10,
      10,
      10,
      10,
      10,
      7,
      5,
      10,
      10,
      10,
      10,
      10,
      10,
      10,
      10,
      10,
      10,
      10,
      10,
      14,
      10,
      10,
      10,
      9,
      12,
      10,
      10,
      10,
      5,
      10,
      10,
      10,
      10,
      10,
      10,
      10,
      7,
      10,
      10,
      10,
      10,
      10,
      10,
      10
   ],
   "Learned Concept": [
      "Grandson ⊔ Sister ⊔ (∃ hasChild.Grandparent)",
      "Grandson ⊔ (∃ hasParent.(Son ⊔ (∃ hasSibling.Parent)))",
      "Grandparent ⊔ (∃ married.(Parent ⊔ Sister))",
      "Male ⊓ (∃ hasSibling.(Father ⊔ (∃ hasSibling.Grandfather)))",
      "Grandson ⊔ (∃ married.(Sister ⊔ (∃ hasSibling.Grandfather)))",
      "Sister ⊔ (∃ married.(Grandfather ⊔ (∃ hasChild.PersonWithASibling)))",
      "Granddaughter ⊓ (∃ hasParent.(Grandmother ⊔ Sister))",
      "Female ⊓ (∃ hasParent.(Sister ⊓ (∃ hasChild.Mother)))",
      "Male ⊔ (Grandchild ⊓ Grandmother)",
      "∃ hasParent.(Brother ⊓ (∃ hasChild.PersonWithASibling))",
      "Brother ⊔ Daughter ⊔ (∃ married.Grandfather)",
      "Female ⊔ (∃ hasSibling.Grandmother)",
      "(Grandfather ⊓ Grandson) ⊔ (∃ hasChild.Grandmother)",
      "Father ⊓ (∃ married.(Grandparent ⊔ PersonWithASibling))",
      "Mother ⊔ (∃ married.(Granddaughter ⊔ (∃ hasParent.Son)))",
      "Sister ⊔ (∃ married.(Sister ⊓ (∃ hasChild.Female)))",
      "Sister ⊔ (∃ married.(Grandchild ⊔ Grandmother))",
      "PersonWithASibling ⊓ (∃ hasSibling.(Grandson ⊓ (∃ hasChild.Sister)))",
      "Grandson ⊔ (∃ married.(PersonWithASibling ⊔ (∃ hasChild.Male)))",
      "Person ⊓ (∃ hasParent.(Grandparent ⊓ (∃ hasSibling.Parent)))",
      "Female ⊓ (∃ hasParent.Grandchild)",
      "Sister ⊔ (∃ married.(Grandmother ⊔ (∃ hasParent.Brother)))",
      "Male ⊓ (∃ hasSibling.(Male ⊓ (∃ hasChild.Male)))",
      "∃ hasParent.(Grandchild ⊓ (∃ hasChild.PersonWithASibling))",
      "(Grandmother ⊓ Sister) ⊔ (∃ hasChild.Grandmother)",
      "Parent ⊔ (∃ hasSibling.(Grandmother ⊔ (∃ hasParent.Grandson)))",
      "Grandparent ⊔ (∃ married.(Female ⊔ (∃ hasParent.Sister)))",
      "Daughter ⊔ (∃ hasSibling.(Grandfather ⊔ Grandson))",
      "Person ⊓ (∃ hasParent.(Granddaughter ⊔ (∃ hasChild.Father)))",
      "PersonWithASibling ⊓ (∃ hasSibling.(Son ⊔ (∃ hasSibling.Father)))",
      "∃ hasParent.(Grandson ⊓ (∃ hasChild.Brother))",
      "∃ hasParent.(PersonWithASibling ⊓ (∃ hasChild.Male))",
      "Grandson ⊔ (∃ hasParent.(Grandchild ⊓ Grandparent))",
      "Brother ⊔ Grandfather ⊔ (∃ hasChild.Grandmother)",
      "Sister ⊔ (∃ married.(Grandchild ⊓ Grandfather))",
      "Child ⊔ (∃ married.(Brother ⊓ Grandchild))",
      "Granddaughter ⊓ (∃ hasParent.(∃ hasSibling.Granddaughter))",
      "Grandparent ⊔ (∃ married.(Mother ⊔ Sister))",
      "Grandchild ⊔ (∃ hasChild.Grandparent)",
      "Grandson ⊔ (∃ married.(Grandfather ⊔ (∃ hasChild.Grandson)))",
      "Person ⊓ (∃ hasParent.(Brother ⊔ (∃ hasSibling.Grandmother)))",
      "Father ⊔ Grandson",
      "Grandchild ⊓ (∃ married.⊤)",
      "Daughter ⊔ Father ⊔ Grandparent",
      "(Grandson ⊓ PersonWithASibling) ⊔ (∃ hasChild.Grandmother)",
      "Mother ⊔ (∃ married.(Male ⊔ (∃ married.PersonWithASibling)))",
      "Parent ⊔ (∃ hasSibling.(Grandfather ⊓ (∃ hasChild.PersonWithASibling)))",
      "Grandparent ⊔ (∃ married.(Female ⊔ (∃ married.Sister)))",
      "Daughter ⊔ (∃ hasSibling.(Grandmother ⊓ (∃ hasChild.Daughter)))",
      "Male ⊓ (∃ hasSibling.(Daughter ⊔ (∃ married.Person)))",
      "Grandson ⊔ (∃ hasSibling.Grandmother)",
      "Granddaughter ⊔ Mother ⊔ (∃ hasChild.Grandparent)",
      "Child ⊔ (∃ married.(Grandparent ⊓ (∃ hasSibling.Sister)))",
      "Mother ⊔ (∃ married.(∃ hasParent.Son))",
      "Grandparent ⊔ (∃ married.(Father ⊓ (∃ hasSibling.Sister)))",
      "Son ⊔ (∃ hasSibling.Grandparent)",
      "Grandson ⊔ (∃ hasParent.(Son ⊓ (∃ hasChild.Brother)))",
      "Person ⊓ (∃ hasParent.(Grandfather ⊔ (∃ hasSibling.Grandfather)))",
      "Sister ⊔ Son ⊔ (∃ hasChild.Mother)",
      "Granddaughter ⊓ (∃ hasParent.(Grandparent ⊔ Grandson))",
      "Grandparent ⊔ (∃ married.(PersonWithASibling ⊔ (∃ married.Son)))",
      "Person ⊓ (∃ hasParent.(Granddaughter ⊓ (∃ hasSibling.Grandmother)))",
      "Sister ⊔ (∃ married.(Female ⊔ (∃ hasSibling.Male)))",
      "Grandmother ⊔ Sister ⊔ (∃ hasChild.Grandparent)",
      "Mother ⊔ (∃ married.(Male ⊓ (∃ hasParent.Grandfather)))",
      "Grandchild ⊓ (∃ hasChild.Mother)",
      "Mother ⊔ (∃ married.(Brother ⊔ Grandmother))",
      "∃ hasParent.(Son ⊔ (∃ hasSibling.Male))",
      "Granddaughter ⊓ (∃ hasParent.(Grandson ⊔ (∃ hasSibling.Son)))",
      "Grandson ⊔ (∃ married.(Grandfather ⊓ (∃ hasSibling.Grandfather)))",
      "Grandson ⊔ (∃ married.(Grandchild ⊔ Son))",
      "PersonWithASibling ⊓ (∃ hasSibling.(Grandson ⊓ (∃ hasSibling.Sister)))",
      "Daughter ⊔ (∃ hasSibling.(Grandson ⊓ (∃ hasSibling.Daughter)))",
      "Grandparent ⊔ (∃ married.(PersonWithASibling ⊔ (∃ married.Sister)))",
      "(Sister ⊔ Son) ⊓ (∃ married.Grandparent)",
      "Grandparent ⊔ (Mother ⊓ Sister)",
      "Mother ⊓ (∃ hasParent.(Brother ⊔ (∃ hasSibling.Grandson)))",
      "Male ⊔ (∃ hasSibling.(Son ⊓ (∃ hasParent.Son)))",
      "Mother ⊔ (∃ married.(Grandchild ⊔ (∃ married.PersonWithASibling)))",
      "Grandson ⊔ (∃ married.(Female ⊓ (∃ hasChild.Grandchild)))",
      "Granddaughter ⊔ Grandparent",
      "Grandson ⊔ (∃ married.(Grandparent ⊓ (∃ hasChild.Sister)))",
      "Grandson ⊔ (∃ married.(Sister ⊔ (∃ hasParent.Sister)))",
      "Mother ⊔ (∃ married.Sister)",
      "Daughter ⊔ (∃ hasChild.Grandmother)",
      "Granddaughter ⊓ (∃ married.(Grandfather ⊔ (∃ hasChild.Daughter)))",
      "Grandson ⊔ (∃ married.(Granddaughter ⊔ Grandfather))",
      "Daughter ⊔ (∃ hasSibling.(Grandson ⊓ (∃ married.⊤)))",
      "Child ⊔ (∃ married.(Sister ⊔ (∃ hasSibling.Grandparent)))",
      "Male ⊔ (∃ hasSibling.(∃ hasSibling.Parent))",
      "Grandson ⊔ (∃ married.(Father ⊓ (∃ hasParent.Sister)))",
      "Grandson ⊔ (∃ married.(Brother ⊔ Grandson))",
      "Father ⊓ (∃ married.(∃ hasParent.Granddaughter))",
      "Sister ⊔ (∃ married.(Granddaughter ⊔ (∃ hasParent.Brother)))",
      "Grandparent ⊔ (∃ married.(PersonWithASibling ⊔ (∃ hasParent.Brother)))",
      "Daughter ⊔ (∃ hasSibling.(Grandparent ⊔ Son))",
      "Parent ⊔ (∃ hasSibling.(Mother ⊔ (∃ hasSibling.Grandparent)))",
      "Grandfather ⊔ (∃ hasSibling.Grandparent)",
      "Granddaughter ⊓ (∃ hasParent.(Grandfather ⊓ (∃ hasChild.Male)))",
      "Granddaughter ⊓ (∃ hasParent.(Sister ⊔ (∃ hasParent.Granddaughter)))",
      "Mother ⊔ (∃ married.(Grandchild ⊔ (∃ hasSibling.Female)))",
      "Female ⊓ (∃ hasParent.(Grandparent ⊓ Son))",
      "Female ⊓ (∃ hasParent.(Grandchild ⊔ PersonWithASibling))",
      "Grandson ⊔ (∃ married.(Grandfather ⊓ (∃ married.Sister)))",
      "Granddaughter ⊓ (∃ hasParent.(Daughter ⊔ (∃ hasSibling.Daughter)))",
      "Grandson ⊔ (∃ hasParent.(Son ⊔ (∃ hasChild.Father)))",
      "Grandson ⊔ (∃ married.(Grandmother ⊓ (∃ hasChild.Male)))",
      "PersonWithASibling ⊓ (∃ hasSibling.(Daughter ⊓ (∃ hasSibling.Sister)))",
      "Sister ⊔ (∃ married.(Grandmother ⊔ (∃ hasChild.Father)))",
      "Grandparent ⊔ (∃ married.(Father ⊓ (∃ hasSibling.Grandson)))",
      "Granddaughter ⊔ Sister",
      "Parent ⊔ (∃ hasSibling.(Grandfather ⊔ Mother))",
      "PersonWithASibling ⊓ (∃ hasSibling.(Son ⊔ (∃ hasChild.Grandmother)))",
      "Granddaughter ⊓ (∃ married.Male)",
      "Male ⊓ (∃ hasSibling.(Male ⊓ (∃ hasSibling.Father)))",
      "Daughter ⊔ Grandson ⊔ (∃ hasSibling.Grandparent)",
      "Grandparent ⊔ (∃ married.(PersonWithASibling ⊔ (∃ hasChild.Grandson)))",
      "Child ⊔ (∃ married.(Granddaughter ⊓ PersonWithASibling))",
      "Grandson ⊔ (∃ hasParent.(Sister ⊔ (∃ hasParent.Daughter)))",
      "Grandson ⊔ (∃ married.(Sister ⊓ (∃ hasChild.Grandfather)))",
      "PersonWithASibling ⊓ (∃ hasSibling.(Mother ⊓ (∃ hasSibling.Male)))",
      "Father ⊔ Sister ⊔ Son",
      "Mother ⊓ (∃ hasParent.(∃ hasParent.Grandson))",
      "(Grandmother ⊔ PersonWithASibling) ⊓ (∃ hasParent.⊤)",
      "Sister ⊔ (∃ married.(Grandmother ⊔ (∃ hasParent.PersonWithASibling)))",
      "Grandparent ⊔ (∃ married.(Brother ⊔ (∃ hasParent.Sister)))",
      "Grandparent ⊔ (∃ married.(Granddaughter ⊔ Male))",
      "PersonWithASibling ⊓ (∃ hasSibling.(Grandchild ⊔ (∃ hasChild.Grandmother)))",
      "PersonWithASibling ⊓ (∃ hasSibling.(Grandchild ⊓ (∃ hasChild.Grandmother)))",
      "Father ⊓ (∃ married.(Child ⊓ (∃ hasChild.PersonWithASibling)))",
      "Child ⊔ (∃ married.(Grandchild ⊓ (∃ hasSibling.Grandparent)))",
      "Grandson ⊔ (∃ married.(Father ⊔ (∃ married.Sister)))",
      "Grandchild ⊓ (Father ⊔ Female)",
      "Daughter ⊔ (∃ hasSibling.(Granddaughter ⊓ Grandparent))",
      "Grandson ⊔ (∃ hasParent.(Granddaughter ⊔ (∃ hasSibling.Father)))",
      "Sister ⊔ (∃ married.(Daughter ⊔ (∃ hasChild.Father)))",
      "Person ⊓ (∃ hasParent.(PersonWithASibling ⊓ (∃ hasChild.Grandfather)))",
      "Grandparent ⊔ (∃ married.Grandchild)",
      "Grandson ⊔ (∃ married.(Daughter ⊓ (∃ hasChild.Grandfather)))",
      "PersonWithASibling ⊓ (∃ hasSibling.(Mother ⊓ (∃ hasParent.Grandchild)))",
      "Child ⊔ (∃ married.(Granddaughter ⊔ (∃ hasParent.Sister)))",
      "Child ⊔ (∃ married.(Grandparent ⊓ (∃ hasSibling.⊤)))",
      "Grandson ⊔ (∃ married.(Granddaughter ⊔ (∃ married.Sister)))",
      "Child ⊔ (∃ married.(Brother ⊔ Grandson))",
      "Daughter ⊔ (∃ hasSibling.(∃ married.Male))",
      "Grandson ⊔ (∃ married.(PersonWithASibling ⊓ (∃ hasParent.Grandson)))",
      "Sister ⊓ (Granddaughter ⊔ Grandparent)",
      "Grandson ⊔ (∃ hasParent.(Grandfather ⊔ (∃ hasChild.PersonWithASibling)))",
      "PersonWithASibling ⊓ (∃ hasSibling.(Grandchild ⊔ (∃ hasChild.Father)))",
      "Sister ⊔ (∃ married.(Male ⊔ (∃ hasSibling.Male)))",
      "Sister ⊔ (∃ married.(PersonWithASibling ⊓ (∃ hasChild.Brother)))",
      "Daughter ⊔ Father",
      "PersonWithASibling ⊓ (∃ hasSibling.(∃ hasChild.Father))",
      "Sister ⊔ (∃ married.(Child ⊓ Parent))",
      "Daughter ⊔ (∃ hasSibling.(Male ⊔ (∃ hasSibling.Granddaughter)))",
      "Grandparent ⊔ (∃ married.(Father ⊓ (∃ hasParent.Brother)))",
      "Sister ⊔ (∃ married.(Grandfather ⊓ (∃ hasChild.PersonWithASibling)))",
      "Child ⊔ (∃ married.(Granddaughter ⊓ Parent))",
      "Mother ⊔ (∃ hasSibling.Grandparent)",
      "Sister ⊔ (∃ married.(Mother ⊓ (∃ hasSibling.Male)))",
      "Brother ⊔ Grandchild ⊔ (∃ married.Grandfather)",
      "∃ hasParent.(Granddaughter ⊓ (∃ hasChild.PersonWithASibling))",
      "Grandparent ⊓ Grandson",
      "Mother ⊔ (∃ married.(Sister ⊔ (∃ hasParent.Son)))",
      "(Brother ⊓ Father) ⊔ (∃ married.Grandfather)",
      "PersonWithASibling ⊓ (∃ hasSibling.(Grandson ⊔ (∃ hasSibling.Grandmother)))",
      "∃ hasParent.(∃ hasChild.Male)",
      "Grandparent ⊔ (∃ married.(Male ⊔ (∃ hasSibling.Son)))",
      "Grandchild",
      "Mother ⊓ (∃ hasParent.(Grandchild ⊔ (∃ hasSibling.Grandfather)))",
      "Person ⊓ (∃ hasParent.(Son ⊔ (∃ hasSibling.Grandfather)))",
      "Granddaughter ⊔ Grandfather ⊔ (∃ hasChild.Mother)",
      "Grandparent ⊔ (∃ hasSibling.Grandmother)",
      "Sister ⊔ (∃ married.(Grandfather ⊔ (∃ hasChild.Male)))",
      "Mother ⊔ (∃ married.(Granddaughter ⊔ (∃ hasSibling.Grandfather)))",
      "(Granddaughter ⊓ Parent) ⊔ (∃ hasChild.Grandmother)",
      "Grandchild ⊔ Grandparent ⊔ PersonWithASibling",
      "Sister ⊔ (∃ married.(Mother ⊓ PersonWithASibling))",
      "Grandfather ⊔ Sister ⊔ (∃ hasChild.Grandparent)",
      "Mother ⊓ (∃ hasParent.(∃ hasChild.Grandson))",
      "PersonWithASibling ⊓ (∃ hasSibling.(Grandchild ⊓ (∃ hasSibling.Grandmother)))",
      "Female ⊓ (∃ hasParent.(Grandmother ⊔ (∃ hasSibling.Grandparent)))",
      "Grandson ⊔ (∃ married.(PersonWithASibling ⊓ (∃ hasChild.Male)))",
      "Male ⊔ (∃ hasSibling.(Grandchild ⊓ Parent))",
      "PersonWithASibling ⊓ (∃ hasSibling.Grandson)",
      "Person ⊓ (∃ hasParent.(PersonWithASibling ⊔ (∃ hasChild.Father)))",
      "Grandson ⊔ (∃ married.(Grandchild ⊓ (∃ hasChild.Sister)))",
      "Sister ⊔ (∃ married.(Male ⊔ (∃ hasChild.Father)))",
      "Daughter ⊔ (∃ hasSibling.(Grandson ⊔ (∃ hasSibling.Daughter)))",
      "Daughter ⊔ Parent",
      "Daughter ⊔ (∃ hasSibling.(Granddaughter ⊔ (∃ hasChild.Daughter)))",
      "PersonWithASibling ⊓ (∃ hasSibling.(Son ⊔ (∃ married.Male)))",
      "Brother ⊓ (∃ hasSibling.(∃ hasChild.PersonWithASibling))",
      "Sister ⊔ (∃ married.(Male ⊔ (∃ hasParent.PersonWithASibling)))",
      "Grandparent ⊔ (∃ married.(Grandson ⊔ (∃ hasSibling.Son)))",
      "Child ⊔ (∃ married.(Son ⊓ (∃ hasChild.Sister)))",
      "Grandson ⊔ (∃ married.(Grandson ⊔ (∃ hasParent.Sister)))",
      "Parent ⊔ (∃ hasSibling.(Parent ⊓ (∃ hasSibling.Grandson)))",
      "Sister ⊔ (∃ married.(Daughter ⊓ (∃ hasSibling.Female)))",
      "Mother ⊔ (∃ married.(∃ married.PersonWithASibling))"
   ]
}